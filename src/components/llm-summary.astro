---
import { Icon } from '@astrojs/starlight/components';
---

<!-- notice here, the key rule is `[&_svg]:open:-rotate-180` -->
<details class="!border rounded-xl border-gray-200 dark:border-gray-700">
  <!-- notice here, we have disabled the summary's default triangle/arrow -->
  <summary class="not-content !flex items-center text-sm cursor-pointer p-4">
    <div class="flex items-center flex-1">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="18"
        height="18"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="lucide lucide-bot-icon lucide-bot mr-2"
        ><path d="M12 8V4H8"></path><rect width="16" height="12" x="4" y="8" rx="2"></rect><path d="M2 14h2"
        ></path><path d="M20 14h2"></path><path d="M15 13v2"></path><path d="M9 13v2"></path></svg
      >
      <b class="mr-2">TL;DR:</b> display the LLM-friendly summary of this page.
    </div>
    <button
      id="copy-summary"
      type="button"
      title="Copy summary markdown"
      aria-label="Copy summary markdown"
      class="bg-transparent h-6 flex items-center"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="lucide lucide-clipboard-icon lucide-clipboard"
        ><rect width="8" height="4" x="8" y="2" rx="1" ry="1"></rect><path
          d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path></svg
      >
    </button>
  </summary>
  <div class="sl-markdown-content p-4 pt-0">
    <slot />
  </div>
</details>

<script>
  function setupCopyButton() {
    console.log('setupCopyButton');
    const copyButton = document.querySelector('#copy-summary') as HTMLButtonElement | null;
    if (!copyButton) return;

    copyButton.addEventListener('click', async (e) => {
      e.preventDefault(); // Prevent the details from toggling
      e.stopPropagation(); // Stop the click from propagating to the summary

      let url = window.location.href;
      if (url.endsWith('/')) {
        url = url.slice(0, -1);
      }
      const mdUrl = url + '.md';

      try {
        const response = await fetch(mdUrl);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const text = await response.text();
        await navigator.clipboard.writeText(text);

        // Visual feedback: Change button text temporarily
        const originalText = copyButton.innerHTML;
        copyButton.textContent = 'Copied!';
        copyButton.disabled = true; // Briefly disable button

        setTimeout(() => {
          copyButton.innerHTML = originalText;
          copyButton.disabled = false;
        }, 1500);
      } catch (error) {
        console.error('Failed to copy markdown:', error);
        // Optional: Provide visual feedback for error
        const originalText = copyButton.innerHTML;
        copyButton.textContent = 'Error';
        copyButton.disabled = true;
        setTimeout(() => {
          copyButton.innerHTML = originalText;
          copyButton.disabled = false;
        }, 2000);
      }
    });
  }

  document.addEventListener('astro:after-swap', () => setupCopyButton());
  setupCopyButton();
</script>
